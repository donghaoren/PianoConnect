CMAKE_MINIMUM_REQUIRED ( VERSION 2.8 )
PROJECT ( PianoConnect )

SET ( EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin" )
SET ( LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/lib" )

if(MSVC)
    foreach(flag_var CMAKE_C_FLAGS_DEBUG CMAKE_CXX_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_CXX_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO CMAKE_CXX_FLAGS_RELWITHDEBINFO)
        string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
        string(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
    endforeach(flag_var)
    SET (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}" CACHE STRING "MSVC C Debug MT flags " FORCE)
    SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}" CACHE STRING "MSVC CXX Debug MT flags " FORCE)
    SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}" CACHE STRING "MSVC C Release MT flags " FORCE)
    SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}" CACHE STRING "MSVC CXX Release MT flags " FORCE)
    SET (CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}" CACHE STRING "MSVC C Debug MT flags " FORCE)
    SET (CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL}" CACHE STRING "MSVC C Release MT flags " FORCE)
    SET (CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}" CACHE STRING "MSVC CXX Debug MT flags " FORCE)
    SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}" CACHE STRING "MSVC CXX Release MT flags " FORCE)
endif()

INCLUDE_DIRECTORIES ( include )

ADD_LIBRARY ( networking
  src/networking.cpp
)

ADD_LIBRARY ( timer
  src/timer.cpp
)

ADD_LIBRARY ( midi
  src/RtMidi.cpp
  src/midi.cpp
)

ADD_EXECUTABLE ( pianoconnect
  src/app_pianoconnect.cpp
  src/pianoconnect.cpp
)

TARGET_LINK_LIBRARIES ( pianoconnect
  midi
  networking
  timer
)

SET ( Boost_USE_STATIC_LIBS ON )
SET ( Boost_MULTITHREADED ON )
SET ( Boost_USE_STATIC_RUNTIME ON )

IF ( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
  # Windows specific.
  ADD_DEFINITIONS ( -DPLATFORM_WINDOWS )
  ADD_DEFINITIONS ( -D__WINDOWS_MM__ )
  TARGET_LINK_LIBRARIES ( midi winmm.lib )
ENDIF ( )

IF ( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
    ADD_DEFINITIONS ( -DPLATFORM_MACOSX )
    ADD_DEFINITIONS ( -D__MACOSX_CORE__ )
    FIND_LIBRARY ( CoreMIDI_LIBRARY CoreMIDI )
    FIND_LIBRARY ( CoreAudio_LIBRARY CoreAudio )
    FIND_LIBRARY ( CoreFoundation_LIBRARY CoreFoundation )
    TARGET_LINK_LIBRARIES ( midi
        ${CoreMIDI_LIBRARY}
        ${CoreAudio_LIBRARY}
        ${CoreFoundation_LIBRARY}
    )
ENDIF ( )

IF ( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
    ADD_DEFINITIONS ( -DPLATFORM_LINUX )
    ADD_DEFINITIONS ( -D__LINUX_ALSA__ )
    FIND_PACKAGE ( ALSA REQUIRED )
    TARGET_LINK_LIBRARIES ( midi
        ${ALSA_LIBRARY}
    )
ENDIF ( )

# Boost library.
FIND_PACKAGE ( Boost REQUIRED COMPONENTS thread system date_time chrono regex )
INCLUDE_DIRECTORIES ( ${Boost_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES ( ${OPENSSL_INCLUDE_DIR} )

FIND_PACKAGE ( OpenSSL )

TARGET_LINK_LIBRARIES ( pianoconnect
    ${Boost_LIBRARIES}
)

TARGET_LINK_LIBRARIES ( networking
    ${Boost_LIBRARIES}
    ${OPENSSL_LIBRARIES}
    timer
)
